name: Tests E2E et Couverture de Code

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  test:
    name: Tests E2E et rapport de couverture
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./front

    steps:
      - uses: actions/checkout@v4

      - name: Installation de netcat
        run: sudo apt-get update && sudo apt-get install -y netcat-openbsd
        working-directory: .

      - name: Configuration de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Installation de pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Configuration du cache pnpm
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            **/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Installation des dÃ©pendances
        run: pnpm install --no-frozen-lockfile

      - name: Installation de Playwright
        run: npx playwright install --with-deps chromium

      - name: Build de l'application Next.js
        run: pnpm run build
        # Pas de continue-on-error car nous avons corrigÃ© les problÃ¨mes SWC

      - name: Lancement du serveur Next.js en mode production
        run: |
          # Utiliser le mode production pour la stabilitÃ©
          NODE_ENV=production PORT=3000 pnpm run start &
          echo $! > .next-server.pid
        env:
          PORT: 3000

      - name: Attente du dÃ©marrage du serveur
        run: |
          echo "Attente du dÃ©marrage du serveur..."
          for i in {1..30}; do
            if nc -z localhost 3000; then
              echo "Serveur dÃ©marrÃ© aprÃ¨s $i tentatives!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Le serveur n'a pas dÃ©marrÃ© aprÃ¨s 30 tentatives."
              exit 1
            fi
            sleep 2
          done

      - name: ExÃ©cution des tests E2E
        timeout-minutes: 15
        run: |
          # ExÃ©cuter en mode CI avec rapport simplifiÃ©
          DEBUG=pw:api CI=true pnpm run test:e2e:ci
        env:
          BASE_URL: http://localhost:3000
          CI: true

      - name: ArrÃªt du serveur Next.js
        if: always()
        run: |
          if [ -f .next-server.pid ]; then
            kill -9 $(cat .next-server.pid) || true
            rm .next-server.pid
          fi

      - name: GÃ©nÃ©ration de la couverture de code
        if: success() || failure()
        run: pnpm run test:coverage

      - name: Extraction des donnÃ©es de couverture
        id: coverage
        if: success() || failure()
        run: |
          # VÃ©rifier si le fichier existe
          if [ -f coverage/coverage-summary.json ]; then
            STATEMENTS=$(grep -A 1 "\"total\":" coverage/coverage-summary.json | grep "statements" | awk -F': ' '{print $2}' | awk -F',' '{print $1}')
            BRANCHES=$(grep -A 1 "\"total\":" coverage/coverage-summary.json | grep "branches" | awk -F': ' '{print $2}' | awk -F',' '{print $1}')
            FUNCTIONS=$(grep -A 1 "\"total\":" coverage/coverage-summary.json | grep "functions" | awk -F': ' '{print $2}' | awk -F',' '{print $1}')
            LINES=$(grep -A 1 "\"total\":" coverage/coverage-summary.json | grep "lines" | awk -F': ' '{print $2}' | awk -F',' '{print $1}')
            
            COVERAGE_TABLE="| MÃ©trique | Couverture |\n|----------|------------|\n"
            COVERAGE_TABLE+="| Statements | ${STATEMENTS}% |\n"
            COVERAGE_TABLE+="| Branches | ${BRANCHES}% |\n"
            COVERAGE_TABLE+="| Functions | ${FUNCTIONS}% |\n"
            COVERAGE_TABLE+="| Lines | ${LINES}% |"
          else
            COVERAGE_TABLE="| MÃ©trique | Couverture |\n|----------|------------|\n"
            COVERAGE_TABLE+="| Rapport | Non disponible |"
          fi
          
          COVERAGE_TABLE="${COVERAGE_TABLE//'%'/'%25'}"
          COVERAGE_TABLE="${COVERAGE_TABLE//$'\n'/'%0A'}"
          COVERAGE_TABLE="${COVERAGE_TABLE//$'\r'/'%0D'}"
          
          echo "coverage-table=$COVERAGE_TABLE" >> $GITHUB_OUTPUT

      - name: Publication du commentaire de couverture
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ## ðŸ“Š Rapport de couverture de code
            
            ${{ steps.coverage.outputs.coverage-table }}
            
            [Voir le rapport dÃ©taillÃ©](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Archivage des rapports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            ./front/playwright-report/
            ./front/test-results/
            ./front/coverage/
          retention-days: 30 