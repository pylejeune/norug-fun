name: Anchor Tests

on:
  push:
    branches: [ '**' ]
#  pull_request:
#    branches: [ '**' ]

jobs:
  test:
    name: Run Anchor Tests in Docker
    runs-on: ubuntu-latest
    
    container:
      image: pylejeune/solana-dev:beta
      # Ne pas utiliser --user root sauf si absolument nécessaire
      # car cela peut modifier l'environnement attendu
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set cluster based on branch
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "ANCHOR_RPC=devnet" >> $GITHUB_ENV
            echo "Using devnet cluster for master branch"
          else
            echo "ANCHOR_RPC=localnet" >> $GITHUB_ENV
            echo "Using localnet cluster for other branches"
          fi
          echo "ANCHOR_RPC is set to $ANCHOR_RPC"
      
      - name: Verify ANCHOR_RPC is set
        run: |
          echo "ANCHOR_RPC value: $ANCHOR_RPC"
          if [ -z "$ANCHOR_RPC" ]; then
            echo "ANCHOR_RPC is not set!"
            exit 1
          fi

      - name: Verify container environment
        shell: bash
        run: |
          echo "=== Current user ==="
          id
          echo "=== Working directory ==="
          pwd
          ls -la
          echo "=== Environment variables ==="
          env | sort
          echo "=== Installed tools ==="
          which anchor solana cargo
          echo "=== Versions ==="
          anchor --version || true
          solana --version || true
          rustc --version  || true
          rustup --version || true

      - name: Generate Solana keypair
        run: |
          mkdir -p ~/.config/solana
          solana-keygen new --no-bip39-passphrase --force --outfile ~/.config/solana/id.json

      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */*/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install modules
        working-directory: front
        run: |
          yarn install --frozen-lockfile

      - name: Install ts-mocha on programs
        working-directory: programs
        run: |
          yarn add ts-mocha@10.0.0 @types/mocha chai @types/chai

      # Cache pour la compilation Anchor
      - name: Cache Anchor build
        uses: actions/cache@v3
        with:
          path: |
            programs/target
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
          key: ${{ runner.os }}-anchor-${{ hashFiles('programs/Cargo.lock', 'programs/Cargo.toml', 'programs/programs/**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-anchor-

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-04-01
          targets: wasm32-unknown-unknown  # si nécessaire
      - run: rustup component add rustfmt

      - name: Build Anchor program
        working-directory: programs
        env:
          ANCHOR_RPC: ${{ env.ANCHOR_RPC }}
        run: |
          echo "Building with ANCHOR_RPC=$ANCHOR_RPC"
          rustc --version &&
          anchor --version &&
          RUSTUP_TOOLCHAIN=nightly-2025-04-01 \
          anchor build

      - name: Run Anchor tests
        shell: bash
        working-directory: programs
        env:
          ANCHOR_RPC: ${{ env.ANCHOR_RPC }}
        run: |
          echo "Testing with ANCHOR_RPC=$ANCHOR_RPC"
          rustc --version &&
          anchor --version &&
          anchor test --skip-build