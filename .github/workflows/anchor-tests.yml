name: Anchor Tests
env:
  GIT_RUSTUP_TOOLCHAIN: nightly-2025-04-01
on:
  push:
    branches: [ '**' ]
#  pull_request:
#    branches: [ '**' ]

jobs:
  test:
    name: Run Anchor Tests in Docker
    runs-on: ubuntu-latest
    
    container:
      image: pylejeune/solana-dev:anchor-0.31.1
      # Ne pas utiliser --user root sauf si absolument nécessaire
      # car cela peut modifier l'environnement attendu
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify container environment
        shell: bash
        run: |
          echo "=== Current user ==="
          id
          echo "=== Working directory ==="
          pwd
          ls -la
          echo "=== Environment variables ==="
          env | sort
          echo "=== Installed tools ==="
          which anchor solana cargo
          echo "=== Versions ==="
          anchor --version || true
          solana --version || true
          rustc --version  || true
          rustup --version || true

      - name: Generate Solana keypair
        run: |
          mkdir -p ~/.config/solana
          solana-keygen new --no-bip39-passphrase --force --outfile ~/.config/solana/id.json

      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */*/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install modules
        working-directory: front
        run: |
          yarn install --frozen-lockfile

      - name: Install ts-mocha on programs
        working-directory: programs
        run: |
          yarn add ts-mocha@10.0.0 @types/mocha chai @types/chai

      - name: Anchor 0.31.1
        working-directory: programs
        run: |
          avm install 0.31.1 && avm use 0.31.1

      # Cache pour la compilation Anchor
      - name: Cache Anchor build
        uses: actions/cache@v3
        with:
          path: |
            programs/target
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
          key: ${{ runner.os }}-anchor-${{ hashFiles('programs/Cargo.lock', 'programs/Cargo.toml', 'programs/programs/**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-anchor-

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: $GIT_RUSTUP_TOOLCHAIN
          targets: wasm32-unknown-unknown  # si nécessaire
      - run: rustup component add rustfmt

      - name: Build Anchor program
        working-directory: programs
        run: |
          rustc --version &&
          anchor --version &&
          RUSTUP_TOOLCHAIN=$GIT_RUSTUP_TOOLCHAIN \
          anchor build

      - name: Run Anchor tests
        shell: bash
        working-directory: programs
        run: |
          rustc --version &&
          anchor --version &&
          anchor test --skip-build

      - name: Build & Deploy Anchor program
        working-directory: programs
        id: anchor_deploy
        run: |
          # Déploie et capture la sortie
          DEPLOY_OUT=$(anchor deploy --provider.cluster devnet 2>&1)
          echo "$DEPLOY_OUT"
          # Extrait la programId depuis la ligne "Program Id: <ID>"
          PROGRAM_ID=$(echo "$DEPLOY_OUT" | grep 'Program Id' | awk '{print $3}')
          # Expose la valeur pour les étapes suivantes
          echo "program_id=$PROGRAM_ID" >> "$GITHUB_OUTPUT"
    
      - name: Afficher la programId
        run: |
          echo "▶️ Program ID déployé : ${{ steps.anchor_deploy.outputs.program_id }}"

          - name: Mettre à jour la variable d'environnement sur Vercel
          run: |
            curl -X POST "https://api.vercel.com/v10/projects/${{ env.VERCEL_PROJECT_NAME }}/env?upsert=true" \
              -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "key": "PROGRAM_ID",
                "value": "${{ steps.anchor_deploy.outputs.program_id }}",
                "type": "encrypted",
                "target": ["production", "preview"]
              }'
          env:
            VERCEL_PROJECT_NAME: norug-fun