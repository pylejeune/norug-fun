import AppWalletProvider from "@/components/AppWalletProvider";
import Header from "@/components/ui/header";
import type { Metadata } from "next";
import { NextIntlClientProvider } from "next-intl";
import { getMessages } from "next-intl/server";
import { Inter } from "next/font/google";
import localFont from "next/font/local";
import { notFound } from "next/navigation";
import { routing } from "../i18n/routing";
import "./globals.css";

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-inter",
  display: "swap",
});

const nacelle = localFont({
  src: [
    {
      path: "../../public/fonts/nacelle-regular.woff2",
      weight: "400",
      style: "normal",
    },
    {
      path: "../../public/fonts/nacelle-italic.woff2",
      weight: "400",
      style: "italic",
    },
    {
      path: "../../public/fonts/nacelle-semibold.woff2",
      weight: "600",
      style: "normal",
    },
    {
      path: "../../public/fonts/nacelle-semibolditalic.woff2",
      weight: "600",
      style: "italic",
    },
  ],
  variable: "--font-nacelle",
  display: "swap",
});
export const metadata: Metadata = {
  title: "NORUGFUN",
  description: "Generated by create next app",
};

type Props = {
  children: React.ReactNode;
  params: Promise<{ locale: (typeof routing.locales)[number] }>;
};
export default async function RootLayout({ children, params }: Props) {
  // Await the resolution of the params promise
  const { locale } = await params;

  // Check if the locale is valid
  if (!routing.locales.includes(locale as (typeof routing.locales)[number])) {
    notFound();
  }

  // Fetch the translation messages for the specified locale
  const messages = await getMessages({ locale });
  return (
    <html lang={locale}>
      <body
        className={`${inter.variable} ${nacelle.variable} bg-gray-950 font-inter text-base text-gray-200 antialiased`}
      >
        <NextIntlClientProvider locale={locale} messages={messages}>
          <AppWalletProvider>
            <Header />
            {children}
          </AppWalletProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
