import { verifyAuthToken } from "@/lib/utils";
import { randomUUID } from "crypto";
import { NextRequest } from "next/server";
import { checkAndSimulateEndEpoch } from "./service";

// Handler pour les requ√™tes GET
export async function GET(request: NextRequest): Promise<Response> {
  const requestId = randomUUID();
  console.log(`[${requestId}] üöÄ D√©marrage de la v√©rification des √©poques...`);

  // V√©rification du token d'authentification
  if (!verifyAuthToken(request)) {
    console.error(`[${requestId}] ‚ùå Authentification √©chou√©e`);
    return new Response(
      JSON.stringify({
        success: false,
        error: "Non autoris√©",
        errorType: "AuthenticationError",
        timestamp: new Date().toISOString(),
        requestId,
      }),
      {
        status: 401,
        headers: { "Content-Type": "application/json" },
      }
    );
  }

  try {
    // V√©rifier et simuler la fermeture des √©poques si n√©cessaire
    const results = await checkAndSimulateEndEpoch();
    console.log(`\n[${requestId}] ‚úÖ V√©rification termin√©e`);
    console.log(
      `[${requestId}] üìä R√©sum√©: ${results.details.epochsChecked} √©poque(s) v√©rifi√©e(s), ${results.details.epochsToClose} √©poque(s) √† fermer, ${results.details.epochsClosed} √©poque(s) ferm√©e(s)`
    );

    // Ajouter information sur la cr√©ation d'une nouvelle √©poque si applicable
    if (results.newEpochCreated) {
      console.log(
        `[${requestId}] üÜï Nouvelle √©poque cr√©√©e: ${
          results.newEpochCreated.success ? "Oui" : "Non"
        }`
      );
      if (results.newEpochCreated.success) {
        console.log(
          `[${requestId}] üÜî ID de la nouvelle √©poque: ${results.newEpochCreated.epochId}`
        );
      }
    }

    return new Response(
      JSON.stringify({
        ...results,
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV,
        rpcEndpoint: process.env.SOLANA_RPC_ENDPOINT,
        requestId,
      }),
      {
        status: 200,
        headers: { "Content-Type": "application/json" },
      }
    );
  } catch (error) {
    const errorType = error instanceof Error ? error.name : typeof error;
    const errorMsg = error instanceof Error ? error.message : String(error);
    const errorStack = error instanceof Error ? error.stack : undefined;
    console.error(
      `[${requestId}] ‚ùå Erreur lors de l'ex√©cution:`,
      errorMsg,
      errorStack
    );
    return new Response(
      JSON.stringify({
        success: false,
        error: errorMsg,
        errorType,
        stack: errorStack,
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV,
        rpcEndpoint: process.env.SOLANA_RPC_ENDPOINT,
        requestId,
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json" },
      }
    );
  }
}
