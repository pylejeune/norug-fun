import {
  createErrorResponse,
  createSuccessResponse,
  verifyAuthToken,
} from "@/lib/utils";
import { randomUUID } from "crypto";
import { NextRequest } from "next/server";
import { runCrankLogic } from "./service";
import { verifyAuthToken, createSuccessResponse, createErrorResponse } from "../../../../lib/utils";

// Handler pour les requ√™tes GET
export async function GET(request: NextRequest): Promise<Response> {
  const requestId = randomUUID();
  console.log(`[${requestId}] üöÄ D√©marrage de l'ex√©cution du crank...`);

  // V√©rification du token d'authentification
  if (!verifyAuthToken(request)) {
    console.error(`[${requestId}] ‚ùå Authentification √©chou√©e`);
    return createErrorResponse(
      requestId,
      {
        message: "Non autoris√©",
        name: "AuthenticationError",
      },
      401
    );
  }

  try {
    // Ex√©cuter la logique du crank directement
    const result = await runCrankLogic();
    console.log(`\n[${requestId}] ‚úÖ Ex√©cution du crank termin√©e`);

    // Si le traitement a r√©ussi
    if (result.success) {
      console.log(`[${requestId}] üìä R√©sum√©: ${result.message}`);
      if (result.details) {
        console.log(
          `[${requestId}] üìà D√©tails: ${result.details.processedCount} √©poque(s) trait√©e(s)`
        );
      }
    } else {
      console.log(
        `[${requestId}] ‚ö†Ô∏è Le crank a rencontr√© un probl√®me: ${result.message}`
      );
    }

    return createSuccessResponse(requestId, result);
  } catch (error) {
    return createErrorResponse(requestId, error);
  }
}
