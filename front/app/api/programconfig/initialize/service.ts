import * as anchor from "@coral-xyz/anchor";
import { PublicKey, Connection } from "@solana/web3.js";
import { getProgram, getAdminKeypairProgramConfig, createAnchorWallet, RPC_ENDPOINT, SHARED_IDL } from "../../../../lib/utils";

interface ProgramConfigResult {
  success: boolean;
  message: string;
  programConfig?: {
    address: string;
    adminAuthority: string;
    programId: string;
  };
}

/**
 * V√©rifie si le ProgramConfig est d√©j√† initialis√© et l'initialise si n√©cessaire
 * @returns R√©sultat de l'op√©ration avec statut et message
 */
export async function initializeProgramConfig(): Promise<ProgramConfigResult> {
  const connection = new Connection(RPC_ENDPOINT);
  const adminKeypair = getAdminKeypairProgramConfig();
  const wallet = createAnchorWallet(adminKeypair);
  const program = getProgram(connection, SHARED_IDL, wallet);

  if (!program) {
    throw new Error("Programme non initialis√©");
  }

  console.log("üîç V√©rification/Initialisation du ProgramConfig...");

  // G√©n√©rer le PDA pour le compte ProgramConfig
  const [programConfigPDA] = PublicKey.findProgramAddressSync(
    [Buffer.from("config")],
    program.programId
  );

  console.log(`üîë PDA du ProgramConfig calcul√©: ${programConfigPDA.toString()}`);

  try {
    // Essayer de r√©cup√©rer le compte ProgramConfig existant
    let programConfigAccount = null;
    
    try {
      if (program.account && typeof program.account === 'object') {
        // V√©rifier si programConfig existe
        if ((program.account as any).programConfig) {
          programConfigAccount = await (program.account as any).programConfig.fetchNullable(programConfigPDA);
          console.log("ProgramConfig trouv√©:", programConfigAccount ? "Oui" : "Non");
        } else {
          console.log("Le compte programConfig n'existe pas dans program.account");
        }
      }
    } catch (fetchError) {
      console.error("Erreur lors de la r√©cup√©ration du compte ProgramConfig:", fetchError);
    }
    
    // V√©rifier si le compte existe ind√©pendamment de l'IDL
    const accountInfo = await connection.getAccountInfo(programConfigPDA);
    console.log("Compte ProgramConfig sur la blockchain:", accountInfo ? "Existe" : "N'existe pas");
    
    if (programConfigAccount) {
      // Le compte existe d√©j√†, retourner ses informations
      return { 
        success: true, 
        message: "Le ProgramConfig est d√©j√† initialis√©.",
        programConfig: {
          address: programConfigPDA.toString(),
          adminAuthority: programConfigAccount.adminAuthority.toString(),
          programId: program.programId.toString()
        }
      };
    }

    // Si on arrive ici, le ProgramConfig n'existe pas et doit √™tre initialis√©
    console.log("üîß Initialisation du ProgramConfig...");
    
    const tx = await (program as any).methods.initializeProgramConfig(adminKeypair.publicKey)
      .accounts({
        programConfig: programConfigPDA,
        authority: adminKeypair.publicKey,
        systemProgram: anchor.web3.SystemProgram.programId,
      })
      .rpc();

    console.log("‚úÖ Transaction:", tx);

    // R√©cup√©rer les informations du ProgramConfig apr√®s initialisation
    let newProgramConfigAccount = null;
    try {
      if ((program.account as any).programConfig) {
        newProgramConfigAccount = await (program.account as any).programConfig.fetch(programConfigPDA);
        console.log("‚úÖ ProgramConfig initialis√© et r√©cup√©r√© avec succ√®s");
      }
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration du ProgramConfig apr√®s initialisation:", error);
    }

    if (newProgramConfigAccount) {
      return { 
        success: true, 
        message: "ProgramConfig initialis√© avec succ√®s.",
        programConfig: {
          address: programConfigPDA.toString(),
          adminAuthority: newProgramConfigAccount.adminAuthority.toString(),
          programId: program.programId.toString()
        }
      };
    } else {
      return { 
        success: true, 
        message: "ProgramConfig initialis√© avec succ√®s, mais les d√©tails ne sont pas disponibles."
      };
    }
  } catch (error: unknown) {
    console.error("Erreur lors de la v√©rification/initialisation du ProgramConfig:", error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    return { 
      success: false, 
      message: `Erreur lors de l'op√©ration: ${errorMessage}` 
    };
  }
} 