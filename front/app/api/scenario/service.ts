import { randomUUID } from "crypto";

export async function createScenario() {
  const requestId = randomUUID();
  console.log(`[${requestId}] üöÄ D√©marrage de la cr√©ation du sc√©nario...`);

  const results = {
    epochs: [] as any[],
    proposals: [] as any[],
  };

  try {
    // R√©cup√©rer le token d'authentification depuis les variables d'environnement
    const authToken = process.env.API_SECRET_KEY;
    if (!authToken) {
      throw new Error(
        "API_SECRET_KEY non d√©fini dans les variables d'environnement"
      );
    }
    console.log(`[${requestId}] üîë Token d'authentification r√©cup√©r√©`);

    // Cr√©er 10 √©poques
    for (let i = 0; i < 10; i++) {
      console.log(
        `\n[${requestId}] üìÖ ====== Cr√©ation de l'√©poque ${i + 1}/10 ======`
      );

      // Appel √† l'endpoint de cr√©ation d'√©poque
      console.log(
        `[${requestId}] üì§ Envoi de la requ√™te de cr√©ation d'√©poque...`
      );
      const epochResponse = await fetch(
        "http://localhost:3000/api/epoch/create",
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${authToken}`,
          },
        }
      );

      if (!epochResponse.ok) {
        throw new Error(
          `Erreur lors de la cr√©ation de l'√©poque ${i + 1}: ${epochResponse.statusText}`
        );
      }

      const epochResult = await epochResponse.json();
      console.log(`[${requestId}] üì• R√©ponse re√ßue pour l'√©poque ${i + 1}:`, {
        success: epochResult.success,
        epochId: epochResult.epoch?.id,
        message: epochResult.message,
      });

      results.epochs.push(epochResult);

      // V√©rifier si l'√©poque a √©t√© cr√©√©e avec succ√®s
      if (!epochResult.success || !epochResult.epoch?.id) {
        throw new Error(`L'√©poque ${i + 1} n'a pas √©t√© cr√©√©e avec succ√®s`);
      }

      // Cr√©er 15 propositions pour chaque √©poque
      console.log(
        `[${requestId}] üìù Cr√©ation des propositions pour l'√©poque ${i + 1}...`
      );
      for (let j = 0; j < 15; j++) {
        console.log(
          `[${requestId}] üì§ Cr√©ation de la proposition ${j + 1}/15...`
        );

        // Appel √† l'endpoint de cr√©ation de proposition
        const proposalResponse = await fetch(
          "http://localhost:3000/api/proposal/create",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${authToken}`,
            },
            body: JSON.stringify({
              tokenName: `Token-${i}-${j}`,
              tokenSymbol: `T${i}${j}`,
              description: `Description pour la proposition ${j + 1} de l'√©poque ${i + 1}`,
              totalSupply: 1000000,
              creatorAllocation: 5,
              lockupPeriod: 86400,
              imageUrl: null,
              epochId: epochResult.epoch.id,
            }),
          }
        );

        if (!proposalResponse.ok) {
          throw new Error(
            `Erreur lors de la cr√©ation de la proposition ${j + 1} pour l'√©poque ${i + 1}: ${proposalResponse.statusText}`
          );
        }

        const proposalResult = await proposalResponse.json();
        console.log(
          `[${requestId}] üì• Proposition ${j + 1} cr√©√©e avec succ√®s:`,
          {
            success: proposalResult.success,
            tokenName: proposalResult.proposal?.tokenName,
            tokenSymbol: proposalResult.proposal?.tokenSymbol,
          }
        );

        results.proposals.push(proposalResult);
      }
      console.log(`[${requestId}] ‚úÖ √âpoque ${i + 1} termin√©e avec succ√®s\n`);
    }

    console.log(`[${requestId}] üéâ Sc√©nario cr√©√© avec succ√®s!`);
    console.log(`[${requestId}] üìä R√©sum√©:`, {
      epochsCreated: results.epochs.length,
      proposalsCreated: results.proposals.length,
    });

    return {
      success: true,
      message: "Sc√©nario cr√©√© avec succ√®s",
      results,
    };
  } catch (error) {
    console.error(
      `[${requestId}] ‚ùå Erreur lors de la cr√©ation du sc√©nario:`,
      error
    );
    throw error;
  }
}
