import * as anchor from "@coral-xyz/anchor";
import { PublicKey, Connection, Keypair, SystemProgram } from "@solana/web3.js";
import { BN } from "@coral-xyz/anchor";
import { 
  getAdminKeypair, 
  getProgram, 
  createAnchorWallet, 
  RPC_ENDPOINT,
  CRON_IDL
} from "../../../../lib/utils";

interface CloseEpochResult {
  success: boolean;
  message: string;
  closedEpochs?: {
    id: string;
    signature: string;
    status: string;
  }[];
  error?: string;
}

/**
 * Ferme toutes les √©poques actives
 */
export async function closeAllEpochs(): Promise<CloseEpochResult> {
  const connection = new Connection(RPC_ENDPOINT);
  const adminKeypair = getAdminKeypair();
  const wallet = createAnchorWallet(adminKeypair);
  const program = getProgram(connection, CRON_IDL, wallet);

  if (!program) {
    throw new Error("Programme non initialis√©");
  }

  console.log("üîç Recherche des √©poques actives...");
  
  try {
    // R√©cup√©rer toutes les √©poques
    const allEpochs = await (program.account as any).epochManagement.all();
    console.log(`üìä Nombre total d'√©poques trouv√©es: ${allEpochs.length}`);

    // Filtrer les √©poques actives
    const activeEpochs = allEpochs.filter((epoch: any) => {
      try {
        return epoch.account.status && Object.keys(epoch.account.status)[0] === 'active';
      } catch (err) {
        return false;
      }
    });

    console.log(`üìä Nombre d'√©poques actives √† fermer: ${activeEpochs.length}`);

    if (activeEpochs.length === 0) {
      return {
        success: true,
        message: "Aucune √©poque active √† fermer"
      };
    }

    const closedEpochs = [];
    const errors = [];

    // Fermer chaque √©poque active
    for (const epoch of activeEpochs) {
      try {
        const epochId = epoch.account.epochId;
        console.log(`\nüîÑ Fermeture de l'√©poque ${epochId.toString()}...`);

        // D√©river la PDA pour epoch_management
        const [epochManagementPDA] = await PublicKey.findProgramAddressSync(
          [
            Buffer.from("epoch"),
            epochId.toArrayLike(Buffer, "le", 8)
          ],
          program.programId
        );

        // D√©river la PDA pour la configuration
        const [configPDA] = PublicKey.findProgramAddressSync(
          [Buffer.from("config")],
          program.programId
        );

        // Construction des comptes pour la transaction
        const accounts = {
          epochManagement: epochManagementPDA,
          authority: adminKeypair.publicKey,
          program_config: configPDA,
          systemProgram: SystemProgram.programId,
        };

        console.log("üìã Comptes utilis√©s pour la transaction:", accounts);
        console.log("üîë Signataire utilis√©:", adminKeypair.publicKey.toString());

        // Envoyer la transaction
        const signature = await program.methods
          .endEpoch(epochId)
          .accounts(accounts)
          .signers([adminKeypair])
          .rpc();

        console.log(`‚úÖ √âpoque ${epochId.toString()} ferm√©e avec succ√®s! Signature: ${signature}`);

        // V√©rification imm√©diate
        try {
          const status = await connection.getSignatureStatus(signature);
          console.log(`üìä Statut initial: ${JSON.stringify(status || {})}`);
        } catch (statusErr) {
          console.log(`‚ö†Ô∏è Impossible de r√©cup√©rer le statut initial: ${statusErr instanceof Error ? statusErr.message : String(statusErr)}`);
        }

        closedEpochs.push({
          id: epochId.toString(),
          signature,
          status: "closed"
        });
      } catch (error) {
        const errorMsg = error instanceof Error ? error.message : String(error);
        console.error(`‚ùå Erreur lors de la fermeture de l'√©poque:`, errorMsg);
        errors.push(`√âpoque ${epoch.account.epochId.toString()}: ${errorMsg}`);
      }
    }

    return {
      success: true,
      message: `Fermeture termin√©e. ${closedEpochs.length} √©poque(s) ferm√©e(s), ${errors.length} erreur(s).`,
      closedEpochs,
      error: errors.length > 0 ? errors.join("; ") : undefined
    };
  } catch (error) {
    const errorMsg = error instanceof Error ? error.message : String(error);
    console.error("‚ùå Erreur lors de la fermeture des √©poques:", errorMsg);
    
    return {
      success: false,
      message: "Erreur lors de la fermeture des √©poques",
      error: errorMsg
    };
  }
} 