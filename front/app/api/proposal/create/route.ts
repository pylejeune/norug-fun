import { randomUUID } from "crypto";
import { NextRequest } from "next/server";
import { randomUUID } from 'crypto';
import { 
  verifyAuthToken, 
  createSuccessResponse, 
  createErrorResponse, 
  generateRandomTokenName, 
  generateRandomTokenSymbol
} from "../../../../lib/utils";
import { createProposal } from "./service";
import { generateAndUploadRandomImage, ipfsToHttp } from "./image-service";

export async function POST(request: NextRequest): Promise<Response> {
  const requestId = randomUUID();
  console.log(`[${requestId}] üöÄ Cr√©ation d'une nouvelle proposition...`);

  // V√©rification du token d'authentification
  if (!verifyAuthToken(request)) {
    console.error(`[${requestId}] ‚ùå Authentification √©chou√©e`);
    return createErrorResponse(
      requestId,
      {
        message: "Non autoris√©",
        name: "AuthenticationError",
      },
      401
    );
  }

  try {
    // Extraction des donn√©es de la requ√™te ou utilisation des valeurs par d√©faut
    const body = await request.json().catch(() => ({}));

    const {
      tokenName = generateRandomTokenName(),
      tokenSymbol = generateRandomTokenSymbol(),
      description = "Description de la proposition par d√©faut",
      totalSupply = 1000000,
      creatorAllocation = 5,
      lockupPeriod = 86400, // 1 jour en secondes
      imageUrl = null,
      epochId = null,
    } = body;

    // G√©n√©ration d'une image al√©atoire sur IPFS si aucune n'est fournie
    let finalImageUrl = imageUrl;
    if (!imageUrl) {
      console.log(`[${requestId}] üñºÔ∏è G√©n√©ration d'une image al√©atoire sur IPFS...`);
      try {
        finalImageUrl = await generateAndUploadRandomImage();
        console.log(`[${requestId}] ‚úÖ Image g√©n√©r√©e et upload√©e sur IPFS: ${finalImageUrl}`);
      } catch (imageError) {
        console.error(`[${requestId}] ‚ö†Ô∏è Erreur lors de la g√©n√©ration d'image:`, imageError);
        // Continuer sans image en cas d'erreur
        finalImageUrl = null;
      }
    }

    console.log(`[${requestId}] üìù Donn√©es de la proposition:`, {
      tokenName,
      tokenSymbol,
      description,
      totalSupply,
      creatorAllocation,
      lockupPeriod,
      imageUrl: finalImageUrl,
      epochId
    });

    const result = await createProposal({
      tokenName,
      tokenSymbol,
      description,
      totalSupply,
      creatorAllocation,
      lockupPeriod,
      imageUrl: finalImageUrl,
      epochId
    });

    // Ajouter l'URL HTTP de l'image √† la r√©ponse
    const ipfsImageUrl = finalImageUrl || '';
    const httpImageUrl = ipfsToHttp(ipfsImageUrl);

    console.log(`[${requestId}] ‚úÖ Proposition cr√©√©e avec succ√®s:`, result);

    return createSuccessResponse(requestId, {
      success: true,
      proposal: {
        ...result,
        imageUrl: ipfsImageUrl,
        imageHttpUrl: httpImageUrl
      }
    });
  } catch (error) {
    console.error(
      `[${requestId}] ‚ùå Erreur lors de la cr√©ation de la proposition:`,
      error
    );
    return createErrorResponse(requestId, error);
  }
}
