import lighthouse from '@lighthouse-web3/sdk';
import { createReadStream } from 'fs';
import { writeFile } from 'fs/promises';
import * as os from 'os';
import * as path from 'path';
import { promisify } from 'util';
import { randomUUID } from 'crypto';
import { generateRandomImageUrl } from '../../../../lib/utils';

// Cl√© API Lighthouse stock√©e dans les variables d'environnement
const LIGHTHOUSE_API_KEY = process.env.LIGHTHOUSE_API_KEY || process.env.NEXT_PUBLIC_LIGHTHOUSE_KEY;

if (!LIGHTHOUSE_API_KEY) {
  console.warn("‚ö†Ô∏è LIGHTHOUSE_API_KEY n'est pas d√©fini dans les variables d'environnement");
}

/**
 * T√©l√©charge une image depuis une URL
 */
async function downloadImage(url: string): Promise<Buffer> {
  try {
    console.log(`üîç T√©l√©chargement de l'image depuis ${url}...`);
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Erreur HTTP: ${response.status}`);
    }
    const arrayBuffer = await response.arrayBuffer();
    return Buffer.from(arrayBuffer);
  } catch (error) {
    console.error("‚ùå Erreur lors du t√©l√©chargement de l'image:", error);
    throw new Error(`Erreur lors du t√©l√©chargement de l'image: ${error}`);
  }
}

/**
 * G√©n√®re un nom de fichier unique pour l'image
 */
function generateUniqueImageName(): string {
  return `token_image_${randomUUID()}.jpg`;
}

/**
 * T√©l√©charge une image al√©atoire et l'upload sur IPFS
 * @param maxRetries Nombre maximal de tentatives en cas d'√©chec
 */
export async function generateAndUploadRandomImage(maxRetries = 3): Promise<string> {
  let attempts = 0;
  
  while (attempts < maxRetries) {
    attempts++;
    
    try {
      if (!LIGHTHOUSE_API_KEY) {
        throw new Error("LIGHTHOUSE_API_KEY n'est pas d√©fini");
      }
      
      // G√©n√©rer une URL d'image al√©atoire
      const imageUrl = generateRandomImageUrl();
      console.log(`üñºÔ∏è [Tentative ${attempts}/${maxRetries}] Image al√©atoire g√©n√©r√©e: ${imageUrl}`);
      
      // T√©l√©charger l'image
      const imageBuffer = await downloadImage(imageUrl);
      console.log(`‚úÖ Image t√©l√©charg√©e avec succ√®s (${imageBuffer.length} octets)`);
      
      // Enregistrer temporairement le fichier
      const tempDir = os.tmpdir();
      const fileName = generateUniqueImageName();
      const filePath = path.join(tempDir, fileName);
      
      await writeFile(filePath, imageBuffer);
      console.log(`üìÅ Image temporairement sauvegard√©e: ${filePath}`);
      
      // Upload sur IPFS via Lighthouse
      console.log(`üöÄ Upload de l'image ${fileName} vers IPFS...`);
      const result = await lighthouse.upload(
        filePath,
        LIGHTHOUSE_API_KEY
      );
      
      // R√©cup√©rer le CID
      const cid = result.data.Hash;
      console.log(`‚úÖ Upload r√©ussi! CID: ${cid}`);
      
      // Retourner l'URL IPFS
      const ipfsUrl = `ipfs://${cid}`;
      return ipfsUrl;
      
    } catch (error) {
      console.error(`‚ùå [Tentative ${attempts}/${maxRetries}] Erreur lors de la g√©n√©ration et de l'upload de l'image:`, error);
      
      // Si derni√®re tentative, propager l'erreur
      if (attempts >= maxRetries) {
        throw new Error(`Impossible de g√©n√©rer et uploader l'image apr√®s ${maxRetries} tentatives: ${error}`);
      }
      
      // Sinon, attendre avant de r√©essayer
      console.log(`‚è≥ Nouvelle tentative dans 1 seconde...`);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  
  // Cas improbable o√π la boucle se termine sans retour ou erreur
  throw new Error("Impossible de g√©n√©rer et uploader l'image: erreur inconnue");
}

/**
 * Convertit une URL IPFS en URL HTTP
 */
export function ipfsToHttp(ipfsUrl: string): string {
  if (!ipfsUrl) return "";
  if (ipfsUrl.startsWith("ipfs://")) {
    const cid = ipfsUrl.replace("ipfs://", "");
    return `https://gateway.lighthouse.storage/ipfs/${cid}`;
  }
  return ipfsUrl;
}

/**
 * R√©cup√®re une URL HTTP pour une URL d'image donn√©e, qu'elle soit IPFS ou HTTP
 * @param imageUrl URL de l'image (IPFS ou HTTP)
 */
export function getAccessibleImageUrl(imageUrl: string | null): string {
  if (!imageUrl) return "";
  return ipfsToHttp(imageUrl);
} 